---
title: "negbin"
format: html
---

```{r}
library(tidyverse)
```


estimate parameters for negative binomial to match win probabilities

[Stan parameterization](https://mc-stan.org/docs/functions-reference/nbalt.html), version 2

[R parameterization](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/NegBinomial.html)

This is the number of failures observed before the $\phi$-th success, where the probability of success is $\phi / (\mu + \phi)$. The mean is $\mu$ and the variance is $\mu + \mu^2 / \phi$.

In R, second parametrization `size` for $\phi$, `mu` for mean.

Thus:

```{r}
dnbinom(0:20, mu = 2, size = 3) %>% 
  enframe()
```

or, better:

```{r}
mu <- 2
size <- 3
tibble(x = 0:20) %>% 
  rowwise() %>% 
  mutate(nb = dnbinom(x, mu = mu, size = size)) %>% 
  mutate(pois = dpois(x, mu)) %>% 
  pivot_longer(-x, names_to = "dist", values_to = "prob") %>% 
  ggplot(aes(x = x, y = prob, fill = dist)) + geom_col(position = "dodge")
```

as size goes to infinity, neg bin tends to poisson, and a smaller size means a longer tail


Now think about goalscoring:

```{r}
negbingoals <- function(theta, maxgoals = 10) {
  # theta = mu1, mu2, phi (in order)
  pr1 <- tibble(x = 0:maxgoals, 
                prob = dnbinom(x, mu = theta[1], size = theta[3]))
  pr2 <- tibble(x = 0:maxgoals, 
                prob = dnbinom(x, mu = theta[2], size = theta[3]))
  crossing(s1 = 0:maxgoals, s2 = 0:maxgoals) %>%
    left_join(pr1, join_by(s1 == x)) %>% 
    left_join(pr2, join_by(s2 == x)) %>% 
    mutate(p = prob.x * prob.y) %>% 
    select(s1, s2, p)
}

negbinwin <- function(theta, maxgoals = 10) {
  negbingoals(theta, maxgoals) %>% 
      mutate(result = case_when(
      s1 > s2 ~ "1",
      s1 < s2 ~ "2",
      .default = "X"
    )) %>% 
    group_by(result) %>% 
    summarize(total_prob = sum(p)) %>% 
    deframe()
}

```

```{r}
negbingoals(c(2, 1, 3))
negbinwin(c(2, 1, 3))
```

Stan can do systems of equations, but I think I stick with optim

```{r}
delta <- function(theta, target) {
  pp <- negbinwin(theta)
  sum((pp-target)^2)
}
```

```{r}
delta(c(2,1,3), c(0.5, 0.25, 0.25))
```

that checks out

```{r}
get_pars <- function(target, guess) {
  ans <- optim(guess, delta, target = target)
  ans$par
}
```


```{r}
#| warning: false
target <- c(0.5, 0.2, 0.3)
guess <- c(2, 2, 2)
pars <- get_pars(guess, target = target)
pars
```

then get probs

```{r}
negbingoals(pars) %>% 
  arrange(desc(p))
```

